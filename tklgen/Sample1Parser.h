//////////////////////////////////////////////////////////////////////////////
// Generated by TKLGEN - Version Mar  8 2013
// Copyright (C) 2013, Thiago Adams (thiago.adams@gmail.com)
// www.thradams.com
//
// Permission to copy, use, modify, sell and distribute this software
// is granted provided this copyright notice appears in all copies.
// This software is provided "as is" without express or implied
// warranty, and with no claim as to its suitability for any purpose.
//
//////////////////////////////////////////////////////////////////////////////
#pragma once

#include <cassert>
#include <string>
#include "tokenizer.h"
#include "Sample1DFA.h"

//Select the input stream type
#include "FileStream.h"
//#include "StringStream.h"
//#include "YourStream.h"


namespace Sample1
{
    enum ErrorCode
    {
        ErrorCodeUnexpectedEof,
        ErrorCodeUnexpectedToken
    
    };


    class ParserException : public std::exception
    {
    public:
        int m_Line;
        int m_Col;
        ErrorCode m_Error;
        ParserException(int line,
                        int col,
                        ErrorCode error)
            : m_Line(line)
            , m_Col(col)
            , m_Error(error)
    {
    }
    };


    class Context
    {
        public:
        //Select
        typedef FileStream   InputStream;
        //typedef StringStream InputStream;
        //typedef YourStream   InputStream;
        
        typedef Tokenizer<Sample1::DFA, InputStream> Scanner;
        
        private:
        Scanner& m_scanner;
        
        Sample1::Tokens m_CurrentToken;
        std::wstring m_lexeme;
        
    public:
        Context(Scanner& s) : m_scanner(s)
        {
            if (!m_scanner.NextToken(m_lexeme, m_CurrentToken))
            {
                throw ParserException(GetLine(), GetCol(), ErrorCodeUnexpectedEof);
            }
        }

        //returns the current token
        Sample1::Tokens Token() const
        {
             return m_CurrentToken;
        }
        
        //checks if Token() == tk and then move the current token
        void Match(Sample1::Tokens tk)
        {
             if (tk != m_CurrentToken)
             {
                throw ParserException(GetLine(), GetCol(), ErrorCodeUnexpectedToken);
             }
             if (!m_scanner.NextToken(m_lexeme, m_CurrentToken))
             {
             }
        }
        
        int GetLine() const
        {
            return m_scanner.m_InputStream.GetLine();
        }
        
        int GetCol() const
        {
            return m_scanner.m_InputStream.GetCol();
        }
        void Action_ModuleName() {}
        void Action_LanguageName() {}
        void Action_teste() {}
        void Action_TokenName() {}
        void Action_TokenEnd() {}
        void Action_SyntaxName() {}
        void Action_PrintAnd() {}
        void Action_PrintOr() {}
        void Action_PrintOptional() {}
        void Action_PrintZeroOrMore() {}
        void Action_PrintOneOrMore() {}
        void Action_PrintChar() {}
        void Action_PrintName() {}
        void Action_PrintAny() {}
        void Action_PrintString() {}
        void Action_PrintRange() {}
        void Action_CloseProduction() {}
        void Action_PrintEmptyProduction() {}
        void Action_PrintAction() {}
    };
    


    void Parse_Main(Context&);
} //namespace

