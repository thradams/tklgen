/*
 * Generated by TKLGEN - VersionOct 27 2014
 * Copyright (C) 2013, Thiago Adams (thiago.adams@gmail.com)
 * www.thradams.com
 *
 */
#ifndef __EVALUATEEXPRLEX_H__
#define __EVALUATEEXPRLEX_H__

namespace EvaluateExpr
{

enum Tokens
{
    TKBlanks,
    TKIdentifier,
    TKEqual,
    TKGreaterEqual,
    TKLessEqual,
    TKGreater,
    TKLess,
    TKEndMark,
    TKNumber,
};

inline const wchar_t* TokensToString(Tokens e)
{
    switch(e)
    {
    case TKBlanks:
        return L"Blanks";
    case TKIdentifier:
        return L"Identifier";
    case TKEqual:
        return L"Equal";
    case TKGreaterEqual:
        return L"GreaterEqual";
    case TKLessEqual:
        return L"LessEqual";
    case TKGreater:
        return L"Greater";
    case TKLess:
        return L"Less";
    case TKEndMark:
        return L"EndMark";
    case TKNumber:
        return L"Number";
    default:
        break;
    }
    return L"";
}

struct Lex
{
    typedef Tokens TokenType;

    static int GetNext(int state, wchar_t ch)
    {
        switch (state)
        {
        case 0:
            if (ch == L'\0')
                return 1;
            else if (ch >= L'\t' && ch <= L'\n')
                return 2;
            else if (ch == L'\r')
                return 2;
            else if (ch == L' ')
                return 2;
            else if (ch == L'$')
                return 3;
            else if (ch == L'+')
                return 4;
            else if (ch == L'-')
                return 4;
            else if (ch >= L'0' && ch <= L'9')
                return 5;
            else if (ch == L'<')
                return 6;
            else if (ch == L'=')
                return 7;
            else if (ch == L'>')
                return 8;
            else if (ch >= L'A' && ch <= L'Z')
                return 3;
            else if (ch == L'_')
                return 3;
            else if (ch >= L'a' && ch <= L'z')
                return 3;
            break; //
        case 1:
            //TKEndMark
            break; //
        case 2:
            if (ch >= L'\t' && ch <= L'\n')
                return 2;
            else if (ch == L'\r')
                return 2;
            else if (ch == L' ')
                return 2;
            //TKBlanks
            break; //
        case 3:
            if (ch == L'$')
                return 3;
            else if (ch >= L'0' && ch <= L'9')
                return 3;
            else if (ch == L':')
                return 10;
            else if (ch >= L'A' && ch <= L'Z')
                return 3;
            else if (ch == L'_')
                return 3;
            else if (ch >= L'a' && ch <= L'z')
                return 3;
            break; //
        case 4:
            if (ch >= L'0' && ch <= L'9')
                return 5;
            break; //
        case 5:
            if (ch == L'.')
                return 11;
            else if (ch >= L'0' && ch <= L'9')
                return 5;
            else if (ch == L'E')
                return 12;
            else if (ch == L'e')
                return 12;
            //TKNumber
            break; //
        case 6:
            if (ch == L'=')
                return 13;
            //TKLess
            break; //
        case 7:
            //TKEqual
            break; //
        case 8:
            if (ch == L'=')
                return 14;
            //TKGreater
            break; //
        case 9:
            return -1;
            break; //
        case 10:
            if (ch == L'$')
                return 15;
            else if (ch >= L'A' && ch <= L'Z')
                return 15;
            else if (ch == L'[')
                return 16;
            else if (ch == L'_')
                return 15;
            else if (ch >= L'a' && ch <= L'z')
                return 15;
            break; //
        case 11:
            if (ch >= L'0' && ch <= L'9')
                return 17;
            break; //
        case 12:
            if (ch == L'+')
                return 18;
            else if (ch == L'-')
                return 18;
            else if (ch >= L'0' && ch <= L'9')
                return 19;
            break; //
        case 13:
            //TKLessEqual
            break; //
        case 14:
            //TKGreaterEqual
            break; //
        case 15:
            if (ch == L'$')
                return 15;
            else if (ch == L'.')
                return 10;
            else if (ch >= L'0' && ch <= L'9')
                return 15;
            else if (ch >= L'A' && ch <= L'Z')
                return 15;
            else if (ch == L'_')
                return 15;
            else if (ch >= L'a' && ch <= L'z')
                return 15;
            //TKIdentifier
            break; //
        case 16:
            if (ch >= L'!' && ch <= L'Z')
                return 20;
            else if (ch == L'\\')
                return 20;
            else if (ch >= L'^' && ch <= L'\u00a0')
                return 20;
            break; //
        case 17:
            if (ch == L'E')
                return 12;
            else if (ch == L'e')
                return 12;
            //TKNumber
            break; //
        case 18:
            if (ch >= L'0' && ch <= L'9')
                return 19;
            break; //
        case 19:
            //TKNumber
            break; //
        case 20:
            if (ch >= L'!' && ch <= L'Z')
                return 20;
            else if (ch == L'\\')
                return 20;
            else if (ch == L']')
                return 21;
            else if (ch >= L'^' && ch <= L'\u00a0')
                return 20;
            break; //
        case 21:
            if (ch == L'.')
                return 10;
            //TKIdentifier
            break; //
        } //switch
        return -1;
    }

    static bool IsInterleave(Tokens tk)
    {
        return tk == TKBlanks;
    }

    static bool GetTokenFromState(int state, Tokens& tk)
    {
        switch(state)
        {
        case 1:
            tk = TKEndMark;
            break;
        case 2:
            tk = TKBlanks;
            break;
        case 5:
            tk = TKNumber;
            break;
        case 6:
            tk = TKLess;
            break;
        case 7:
            tk = TKEqual;
            break;
        case 8:
            tk = TKGreater;
            break;
        case 13:
            tk = TKLessEqual;
            break;
        case 14:
            tk = TKGreaterEqual;
            break;
        case 15:
            tk = TKIdentifier;
            break;
        case 17:
            tk = TKNumber;
            break;
        case 19:
            tk = TKNumber;
            break;
        case 21:
            tk = TKIdentifier;
            break;
        default:
            return false;
        }
        return true;
    }
};
} //namespace
#endif //header
