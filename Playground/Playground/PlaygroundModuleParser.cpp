/*
 * Generated by TKLGEN - VersionNov 18 2015
 * Copyright (C) 2013, Thiago Adams (thiago.adams@gmail.com)
 * www.thradams.com
 *
 */

#include "stdafx.h"
#include <assert.h>

#include "PlaygroundModuleLex.h"
#include "PlaygroundModuleParser.h"




//
const char* PlaygroundLang_Actions_Text(PlaygroundLang_Actions e)
{
    switch(e)
    {
        case  PrintNewLine: return "PrintNewLine";
        case  PrintPlus: return "PrintPlus";
        case  PrintMinus: return "PrintMinus";
        case  PrintMulti: return "PrintMulti";
        case  PrintDiv: return "PrintDiv";
        case  PrintPower: return "PrintPower";
        case  PrintLexeme: return "PrintLexeme";
        case  PrintNeg: return "PrintNeg";
    }
    return "";
};

/*forward declarations*/ 
Result Parse_E( PlaygroundLang_Context* ctx);
Result Parse_Main( PlaygroundLang_Context* ctx);
Result Parse_T( PlaygroundLang_Context* ctx);
Result Parse_F( PlaygroundLang_Context* ctx);
Result Parse_Expressions( PlaygroundLang_Context* ctx);
Result Parse_E2( PlaygroundLang_Context* ctx);
Result Parse_Expression( PlaygroundLang_Context* ctx);
Result Parse_T2( PlaygroundLang_Context* ctx);
Result Parse_FOpt( PlaygroundLang_Context* ctx);
Result Parse_P( PlaygroundLang_Context* ctx);





#define _CHECK if (result == RESULT_OK || result == RESULT_EMPTY) result = 

Result PlaygroundLang_Parse(PlaygroundLang_Context* ctx)
{
  return Parse_Main(ctx);
}


Result Parse_E( PlaygroundLang_Context* ctx)
{
    Result result = RESULT_OK;
    PlaygroundLang_Tokens token = ctx->token; 

    if (token == TKMinus ||
        token == TKOpen ||
        token == TKInteger ||
        token == TKIdentifier)
    {
        /*E => T E2 */
        _CHECK Parse_T(ctx);
        _CHECK Parse_E2(ctx);
    }
    else
    {
        PlaygroundLang_OnAction(ctx, OnError);
        return RESULT_FAIL;
    }

    return result;
}

Result Parse_Main( PlaygroundLang_Context* ctx)
{
    Result result = RESULT_OK;
    PlaygroundLang_Tokens token = ctx->token; 

    if (token == TKMinus ||
        token == TKEndMark ||
        token == TKOpen ||
        token == TKInteger ||
        token == TKIdentifier)
    {
        /*Main => Expressions */
        _CHECK Parse_Expressions(ctx);
    }
    else
    {
        PlaygroundLang_OnAction(ctx, OnError);
        return RESULT_FAIL;
    }

    return result;
}

Result Parse_T( PlaygroundLang_Context* ctx)
{
    Result result = RESULT_OK;
    PlaygroundLang_Tokens token = ctx->token; 

    if (token == TKMinus ||
        token == TKOpen ||
        token == TKInteger ||
        token == TKIdentifier)
    {
        /*T => F T2 */
        _CHECK Parse_F(ctx);
        _CHECK Parse_T2(ctx);
    }
    else
    {
        PlaygroundLang_OnAction(ctx, OnError);
        return RESULT_FAIL;
    }

    return result;
}

Result Parse_F( PlaygroundLang_Context* ctx)
{
    Result result = RESULT_OK;
    PlaygroundLang_Tokens token = ctx->token; 

    if (token == TKMinus ||
        token == TKOpen ||
        token == TKInteger ||
        token == TKIdentifier)
    {
        /*F => P FOpt */
        _CHECK Parse_P(ctx);
        _CHECK Parse_FOpt(ctx);
    }
    else
    {
        PlaygroundLang_OnAction(ctx, OnError);
        return RESULT_FAIL;
    }

    return result;
}

Result Parse_Expressions( PlaygroundLang_Context* ctx)
{
    Result result = RESULT_OK;
    PlaygroundLang_Tokens token = ctx->token; 

    if (token == TKMinus ||
        token == TKOpen ||
        token == TKInteger ||
        token == TKIdentifier)
    {
        /*Expressions => Expression Expressions */
        _CHECK Parse_Expression(ctx);
        _CHECK Parse_Expressions(ctx);
    }
    else if (token == TKEndMark)
    {
        /*Expressions => Epsilon */
        return RESULT_EMPTY; /*opt*/
    }
    else
    {
        PlaygroundLang_OnAction(ctx, OnError);
        return RESULT_FAIL;
    }

    return result;
}

Result Parse_E2( PlaygroundLang_Context* ctx)
{
    Result result = RESULT_OK;
    PlaygroundLang_Tokens token = ctx->token; 

    if (token == TKPlus)
    {
        /*E2 => Plus T E2 */
        _CHECK PlaygroundLang_Match(ctx, TKPlus);
        _CHECK Parse_T(ctx);
        _CHECK PlaygroundLang_OnAction(ctx,PrintPlus);
        _CHECK Parse_E2(ctx);
    }
    else if (token == TKMinus)
    {
        /*E2 => Minus T E2 */
        _CHECK PlaygroundLang_Match(ctx, TKMinus);
        _CHECK Parse_T(ctx);
        _CHECK PlaygroundLang_OnAction(ctx,PrintMinus);
        _CHECK Parse_E2(ctx);
    }
    else if (token == TKClose ||
        token == TKEnd)
    {
        /*E2 => Epsilon */
        return RESULT_EMPTY; /*opt*/
    }
    else
    {
        PlaygroundLang_OnAction(ctx, OnError);
        return RESULT_FAIL;
    }

    return result;
}

Result Parse_Expression( PlaygroundLang_Context* ctx)
{
    Result result = RESULT_OK;
    PlaygroundLang_Tokens token = ctx->token; 

    if (token == TKMinus ||
        token == TKOpen ||
        token == TKInteger ||
        token == TKIdentifier)
    {
        /*Expression => E End */
        _CHECK Parse_E(ctx);
        _CHECK PlaygroundLang_Match(ctx, TKEnd);
        _CHECK PlaygroundLang_OnAction(ctx,PrintNewLine);
    }
    else
    {
        PlaygroundLang_OnAction(ctx, OnError);
        return RESULT_FAIL;
    }

    return result;
}

Result Parse_T2( PlaygroundLang_Context* ctx)
{
    Result result = RESULT_OK;
    PlaygroundLang_Tokens token = ctx->token; 

    if (token == TKMulti)
    {
        /*T2 => Multi F T2 */
        _CHECK PlaygroundLang_Match(ctx, TKMulti);
        _CHECK Parse_F(ctx);
        _CHECK PlaygroundLang_OnAction(ctx,PrintMulti);
        _CHECK Parse_T2(ctx);
    }
    else if (token == TKDiv)
    {
        /*T2 => Div F T2 */
        _CHECK PlaygroundLang_Match(ctx, TKDiv);
        _CHECK Parse_F(ctx);
        _CHECK PlaygroundLang_OnAction(ctx,PrintDiv);
        _CHECK Parse_T2(ctx);
    }
    else if (token == TKDiv ||
        token == TKPlus ||
        token == TKMulti ||
        token == TKMinus ||
        token == TKPower ||
        token == TKClose ||
        token == TKEnd)
    {
        /*T2 => Epsilon */
        return RESULT_EMPTY; /*opt*/
    }
    else
    {
        PlaygroundLang_OnAction(ctx, OnError);
        return RESULT_FAIL;
    }

    return result;
}

Result Parse_FOpt( PlaygroundLang_Context* ctx)
{
    Result result = RESULT_OK;
    PlaygroundLang_Tokens token = ctx->token; 

    if (token == TKPower)
    {
        /*FOpt => Power F */
        _CHECK PlaygroundLang_Match(ctx, TKPower);
        _CHECK Parse_F(ctx);
        _CHECK PlaygroundLang_OnAction(ctx,PrintPower);
    }
    else if (token == TKDiv ||
        token == TKPlus ||
        token == TKMulti ||
        token == TKMinus ||
        token == TKPower ||
        token == TKClose ||
        token == TKEnd)
    {
        /*FOpt => Epsilon */
        return RESULT_EMPTY; /*opt*/
    }
    else
    {
        PlaygroundLang_OnAction(ctx, OnError);
        return RESULT_FAIL;
    }

    return result;
}

Result Parse_P( PlaygroundLang_Context* ctx)
{
    Result result = RESULT_OK;
    PlaygroundLang_Tokens token = ctx->token; 

    if (token == TKInteger)
    {
        /*P => Integer */
        _CHECK PlaygroundLang_OnAction(ctx,PrintLexeme);
        _CHECK PlaygroundLang_Match(ctx, TKInteger);
    }
    else if (token == TKIdentifier)
    {
        /*P => Identifier */
        _CHECK PlaygroundLang_OnAction(ctx,PrintLexeme);
        _CHECK PlaygroundLang_Match(ctx, TKIdentifier);
    }
    else if (token == TKOpen)
    {
        /*P => Open E Close */
        _CHECK PlaygroundLang_Match(ctx, TKOpen);
        _CHECK Parse_E(ctx);
        _CHECK PlaygroundLang_Match(ctx, TKClose);
    }
    else if (token == TKMinus)
    {
        /*P => Minus T */
        _CHECK PlaygroundLang_Match(ctx, TKMinus);
        _CHECK Parse_T(ctx);
        _CHECK PlaygroundLang_OnAction(ctx,PrintNeg);
    }
    else
    {
        PlaygroundLang_OnAction(ctx, OnError);
        return RESULT_FAIL;
    }

    return result;
}

